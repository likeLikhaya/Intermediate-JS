Introduction to Node.js
Day 1
What is Node.js?
-	Is an open-source server environment.
-	Allows you to run JS on the server.
-	We can read and write files on a computer.
-	Can connect to a database.
-	It allows developers to execute JavaScript code outside of a web browser.
-	Built on the V8 JavaScript engine for high performance.
What would we use Node for?
-	To run JS on the server side and handle requests made.
-	Can share code between front and back end because we only use JS.
-	Node.js is built on the V8 JavaScript engine from Google, which provides high performance.
-	It's designed for building scalable network applications and is often used for server-side programming.
-	Node.js uses an event-driven, non-blocking I/O model, making it highly efficient for handling concurrent connections.
Platform Compatibility:
-	Compatible with various operating systems (Windows, macOS, Linux).
-	Highly extensible, allowing for custom modules and extensions.
-	Community-driven maintenance and updates for ongoing improvements and security.
 
Day 2 – Node JS Libraries
Core Libraries:
-	Node.js provides a set of core libraries for essential functions.
-	These include libraries for file system operations, network communication, and more.
-	Core libraries are available by default and don't require additional installation.
Third-party Libraries:
-	Node.js has a vast ecosystem of third-party libraries available via npm (Node Package Manager).
-	Developers can easily install and manage these libraries to extend functionality.
-	Common libraries include Express.js for web application development, Socket.io for real-time communication, and Mongoose for MongoDB interactions.
Modules:
-	Node.js promotes modularity through the CommonJS module system.
-	Modules encapsulate code into reusable units, enhancing code organization.
-	The ‘require’ function is used to import modules.
Socket.io:
-	Enables real-time, bidirectional communication between the server and clients.
-	Popular for chat applications, online gaming, and other real-time features.
-	Supports WebSocket and other transport mechanisms.


 
Day 4 – Assigning a Sprite
Introduction to Sprites:
-	Sprites are a graphic or image component used in computer graphics and game development.
-	They are often used to represent objects, characters, or elements in a 2D or 3D environment.
-	Sprites are usually small, 2D images or animations.
Types of Sprites:
-	Static Sprites: Non-animated images representing objects or characters.
-	Animated Sprites: Sequences of images used to create animations.
-	Tile Sprites: Grid-based sprites used for tile-based games.
Usage in 2D Games:
-	Sprites play a central role in 2D game development.
-	They are used to display characters, objects, backgrounds, and more.
-	Sprites can be manipulated to create animations and respond to user input.

Sprites are a fundamental component in graphics, gaming, and web development. They serve a variety of purposes, from representing game characters to enhancing user interfaces. Proper sprite management and optimization are key to creating visually engaging and responsive experiences.

